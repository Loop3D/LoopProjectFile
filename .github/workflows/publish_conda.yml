name: publish_conda

on:
   release:
      types: [published]
jobs:
  conda-deploy:
    name: Uploading to Loop3d for python ${{ matrix.os }} ${{matrix.python-version}})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.8","3.9","3.10","3.11"]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v2
      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2  
      - name: Conda build'
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN  }}
        shell: bash -l {0}
        run: |
           conda install -c conda-forge conda-build netCDF4>=1.5.4 numpy anaconda-client -y
           conda build -c anaconda -c conda-forge -c loop3d --output-folder conda conda
           conda install anaconda-client -y
      - name: upload windows
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN  }}
        if: matrix.os == 'windows-latest'
        shell: bash -l {0}
        run: |
           anaconda upload --label main conda/win-64/*.tar.bz2 
      - name: upload linux
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN  }}
        if: matrix.os == 'ubuntu-latest'
        shell: bash -l {0}
        run: |
           anaconda upload --label main conda/linux-64/*.tar.bz2 
      - name: upload macosx
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN  }}
        if: matrix.os == 'macos-latest'
        shell: bash -l {0}
        run: |
            anaconda upload --label main conda/osx-64/*.tar.bz2           
